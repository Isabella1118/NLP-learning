1. What does a neuron compute?


A. A neuron computes an activation function followed by a linear function (z = Wx + b)


B. A neuron computes the mean of all features before applying the output to an activation function


C. (Correct) A neuron computes a linear function (z = Wx + b) followed by an activation function

Correct, we generally say that the output of a neuron is a = g(Wx + b) where g is the activation function (sigmoid, tanh, ReLU, ...).


D. A neuron computes a function g that scales the input x linearly (Wx + b)

3. Suppose img is a (32,32,3) array, representing a 32x32 image with 3 color channels red, green and blue. 
How do you reshape this into a column vector?


A. x = img.reshape((1,32*32,*3))

B. (Correct) x = img.reshape((32*32*3,1))

C. x = img.reshape((3,32*32))

D. x = img.reshape((32*32,3))


4. Consider the two following random arrays "a" and "b", What will be the shape of "c"?

a = np.random.randn(2, 3) # a.shape = (2, 3)
b = np.random.randn(2, 1) # b.shape = (2, 1)
c = a + b

A. c.shape = (3, 2)

B. (Correct) c.shape = (2, 3)
Yes! This is broadcasting. b (column vector) is copied 3 times so that it can be summed to each column of a.

C. The computation cannot happen because the sizes don't match. It's going to be "Error"!

D. C. c.shape = (2, 1)

5. Consider the two following random arrays "a" and "b", What will be the shape of "c"?

a = np.random.randn(4, 3) # a.shape = (4, 3)
b = np.random.randn(3, 2) # b.shape = (3, 2)
c = a*b

A. c.shape = (3, 3)

B. (Correct) The computation cannot happen because the sizes don't match. It's going to be "Error"!
Indeed! In numpy the "*" operator indicates element-wise multiplication. It is different from "np.dot()". If you would try "c = np.dot(a,b)" you would get c.shape = (4, 2).

C. c.shape = (4,2)

D. c.shape = (4, 3)

7. Recall that "np.dot(a,b)" performs a matrix multiplication on a and b, whereas "a*b" performs an element-wise multiplication.
Consider the two following random arrays "a" and "b", What is the shape of c?

a = np.random.randn(12288, 150) # a.shape = (12288, 150)
b = np.random.randn(150, 45) # b.shape = (150, 45)
c = np.dot(a,b)

A. (Correct) c.shape = (12288, 45)
Correct, remember that a np.dot(a, b) has shape (number of rows of a, number of columns of b). The sizes match because:
"number of columns of a = 150 = number of rows of b"

B. c.shape = (150,150)

C. c.shape = (12288, 150)

D. The computation cannot happen because the sizes don't match. It's going to be "Error"!

8. Consider the following code snippet:

# a.shape = (3,4)
# b.shape = (4,1)

for i in range(3):
  for j in range(4):
    c[i][j] = a[i][j] + b[j]
    
How do you vectorize this?

A. c = a + b

B. c = a.T + b

C. c = a.T + b.T

D. (Correct) c = a + b.T

9. Consider the following code:

a = np.random.randn(3, 3)
b = np.random.randn(3, 1)
c = a*b

What will be c? (If you’re not sure, feel free to run this in python to find out).

A. (Correct) This will invoke broadcasting, so b is copied three times to become (3,3), and *∗ is an element-wise product so c.shape will be (3, 3)

B. This will invoke broadcasting, so b is copied three times to become (3, 3), and *∗ invokes a matrix multiplication operation of two 3x3 matrices so c.shape will be (3, 3)

C. This will multiply a 3x3 matrix a with a 3x1 vector, thus resulting in a 3x1 vector. That is, c.shape = (3,1).

D. It will lead to an error since you cannot use “*” to operate on these two matrices. You need to instead use np.dot(a,b)




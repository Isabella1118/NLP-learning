
import mglearn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# SVM
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
X, y = mglearn.tools.make_handcrafted_dataset()
svm = SVC(kernel='rbf', C=10, gamma=0.1).fit(X, y)
mglearn.plots.plot_2d_separator(svm, X, eps=.5)
mglearn.discrete_scatter(X[:, 0], X[:, 1], y)

sv = svm.support_vectors_
sv_labels = svm.dual_coef_.ravel() > 0
mglearn.discrete_scatter(sv[:, 0], sv[:, 1], sv_labels, s=15, markeredgewidth=3)
plt.xlabel("Feature 0")
plt.ylabel("Feature 1")

# SVM parameters
fig, axes = plt.subplots(3, 3, figsize=(15, 10))

for ax, C in zip(axes, [-1, 0, 3]):
    for a, gamma in zip(ax, range(-1, 2)):
        mglearn.plots.plot_svm(log_C=C, log_gamma=gamma, ax=a)

axes[0, 0].legend(["class 0", "class 1", "sv class 0", "sv class 1"],
                  ncol=4, loc=(.9, 1.2))

# breast cancer dataset with RBF kernel SVM
X_train, X_test, y_train, y_test = train_test_split(
        cancer.data, cancer.target, random_state=0)

svc = SVC()
svc.fit(X_train, y_train)

print("Accuracy on training set: {: .2f}".format(svc.score(X_train, y_train)))
print("Accuracy on test set: {: .2f}".format(svc.score(X_test, y_test)))

# Preprocessing for SVM
# for training set
min_on_training = X_train.min(axis=0)
range_on_training = (X_train - min_on_training).max(axis=0)

X_train_scaled = (X_train - min_on_training) / range_on_training
print("Minimum for each feature\n{}".format(X_train_scaled.min(axis=0)))
print("Maximum for each feature\n{}".format(X_train_scaled.max(axis=0)))

# for test set
X_test_scaled = (X_test - min_on_training) / range_on_training

svc = SVC()
svc.fit(X_train_scaled, y_train)

print("Accuracy on training set: {: .3f}".format(svc.score(X_train_scaled, y_train)))
print("Accuracy on test set: {: .3f}".format(svc.score(X_test_scaled, y_test)))

# gamma and C
svc = SVC(C=1000)
svc.fit(X_train_scaled, y_train)

print("Accuracy on training set: {: .3f}".format(svc.score(X_train_scaled, y_train)))
print("Accuracy on test set: {: .3f}".format(svc.score(X_test_scaled, y_test)))
